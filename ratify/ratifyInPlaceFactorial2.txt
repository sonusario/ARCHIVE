[(0) (n) FAC (1) (n n 1 - @ FAC @ * @)]

[(0)
 (n)
 FAC
 (1)
 (n n 1 - @ FAC @ * @)
]

3 FAC @
3 3 1 - @ FAC @ * @
3 2 FAC @ * @
3 2 2 1 - @ FAC @ * @ * @
3 2 1 FAC @ * @ * @
3 2 1 1 1 - @ FAC @ * @ * @ * @
3 2 1 0 FAC @ * @ * @ * @
3 2 1 1 * @ * @ * @

Totals for mem usage with recursion
18 def fac mem usage
n + 2(n-1)
---
3n + 16

Totals for mem usage with looping
30 def loop mem usage
37 def fac mem usate
38 greatest runtime state mem usage
---
105

3n + 16 > 105
3n > 89
n > 89/3
n > 29.666...


Totals for mem usage with looping v2
7 def T mem usage
7 def F mem usage
47 def fac mem usage
29 greatest runtime state mem usage
---
90

3n + 16 > 90
3n > 74
n > 74/3
n > 24.666...

[(x y) T (x)]
[(x y) F (y)]

[(()) (\@) isn (T) (F)]

[(0)
 (n)
 FAC
 ((1) (ans @) ans @ isn @ @)
 ((n 1 - @ FAC @ [ans n]) (n 1 - @ FAC @ [ans ans @ n * @]) ans @ isn @ @)
]

3 FAC @
---
(3 1 - @ FAC @ [ans 3]) (3 1 - @ FAC @ [ans ans @ 3 * @]) ans @ isn @ @
(3 1 - @ FAC @ [ans 3]) (3 1 - @ FAC @ [ans ans @ 3 * @]) () isn @ @
(3 1 - @ FAC @ [ans 3]) (3 1 - @ FAC @ [ans ans @ 3 * @]) T @
3 1 - @ FAC @ [ans 3]
3 1 - @ FAC @
2 FAC @
(2 1 - @ FAC @ [ans 2]) (2 1 - @ FAC @ [ans ans @ 2 * @]) ans @ isn @ @
(2 1 - @ FAC @ [ans 2]) (2 1 - @ FAC @ [ans ans @ 2 * @]) 3 isn @ @
(2 1 - @ FAC @ [ans 2]) (2 1 - @ FAC @ [ans ans @ 2 * @]) F @
2 1 - @ FAC @ [ans ans @ 2 * @]
2 1 - @ FAC @ [ans 3 2 * @]
2 1 - @ FAC @ [ans 6]
2 1 - @ FAC @
1 FAC @
(1 1 - @ FAC @ [ans 1]) (1 1 - @ FAC @ [ans ans @ 1 * @]) ans @ isn @ @
(1 1 - @ FAC @ [ans 1]) (1 1 - @ FAC @ [ans ans @ 1 * @]) 6 isn @ @
(1 1 - @ FAC @ [ans 1]) (1 1 - @ FAC @ [ans ans @ 1 * @]) F @
1 1 - @ FAC @ [ans ans @ 1 * @]
1 1 - @ FAC @ [ans 6 1 * @]
1 1 - @ FAC @ [ans 6]
1 1 - @ FAC @
0 FAC @
(1) (ans @) ans @ isn @ @
(1) (ans @) 6 isn @ @
(1) (ans @) F @
ans @
---
6