$ with no "->" indicates a structural definition; variables are defined as functions

(<any>
	(<emt>)
	(<cop>)) $

(<cop>
	(<cop> <cop>)
	(<cmp>)
	(<phr>)) $

(<cmp>
	(<wrd>)
	((<cop>))) $

(<phr>
	(<wrd>)
	(<phr> <phr>)) $

((x y) F (-> x)) $
((x y) T (-> y)) $

((x) quote (-> x)) $

((a b) eq (b a -> T) (-> F)) $

(((f r)) first
	((<cmp> <any>) -> f)
	((<any>) -> nil)) $

(((f r)) rest
	((<cmp> <any>) -> (r))
	((<any>) -> ())) $

((n) f
	(0 -> 1)
	(-> n n 1 - @ f @ * @))

((n) -- (-> n 1 - @))

((n) f2
	(0 -> 1)
	(-> n n -- @ f2 @ * @)) $

((n sf) fac
	(0 <wrd> -> 1)
	(<wrd> <wrd> -> n sf @))$

5 ((n) -> (<wrd> -> n n -- @ subFac fac @ * @)) $ fac @
---
3 (->) @
3 3 -- @ (->) fac @ * @
3 3 1 - @ (->) fac @ * @
3 2 (->) fac @ * @
3 2 (->) @ * @
3 2 2 -- @ (->) fac @ * @ * @
3 2 2 2 - @ (->) fac @ * @ * @
3 2 1 (->) fac @ * @ * @
3 2 1 (->) @ * @ * @
3 2 1 1 -- @ (->) fac @ * @ * @ * @
3 2 1 1 1 - @ (->) fac @ * @ * @ * @
3 2 1 0 (->) fac @ * @ * @ * @
3 2 1 1 * @ * @ * @
3 2 1 * @ * @
3 2 * @
---
6






(() x (-> 5))

> x
x

> x @
5






MABYE???

((fun @result) nullthrows
	(null -> ("bad code:" fun) Error @)
	(-> result)) $

((fun @) nullthrows
	(null -> ("bad code:" fun) Error @)
	(-> fun @)) $

db 'billy' getUser @ nullthrows @
---
null nullthrows @
("bad code:" null) Error @
---
bad code: null

db 'billy' getUser @ nullthrows @
---
billy nullthrows @
---
billy



(db 'billy' getUser @) nullthrows @
---
("bad code:" (db 'billy' getUser @)) Error @
---
bad code: (db 'billy' getUser @)

(db 'billy' getUser @) nullthrows @
---
(db 'billy' getUser @) @
db 'billy' getUser @
---
billy







((f r) first
	((<cmp> <any>) -> f)
	(-> nil)) $

((f r) rest
	((<cmp> <any>) -> (r))) $

((fr l) frest
	((<any> <cmp>) -> (fr))) $

((r l) last
	((<any> <cmp> -> l)) $



(((r) z) append
	((<any>) <cmp> -> (r z))) $

((a (r)) prepend
	(<cmp> (<any>) -> (a r))) $



((lst) firstToLast
	((<cop>) -> lst rest @ lst first @ append @)) $

((lst) lastToFirst
	((<cop>) -> lst last @ lst frest @ prepend @)) $



((a b) eq
	(b a -> t)
	(-> ())) $